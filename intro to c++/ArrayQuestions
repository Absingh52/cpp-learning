| No. | Problem Name                       | Description                                                 | Time Complexity | Space Complexity |
| --- | ---------------------------------- | ----------------------------------------------------------- | --------------- | ---------------- |
| 1  | Find Unique Element                | Find the element that appears only once using XOR           | O(n)            | O(1)             |
| 2  | Two Sum & Three Sum                | Find two/three numbers that sum up to a target              | O(nÂ²)           | O(n)             |
| 3  | Shift Array by One                 | Shift all elements to the right by one                      | O(n)            | O(n)             |
| 4  | Rotate Array by K Positions        | Rotate array to the right by k positions using reverse      | O(n)            | O(1)             |
| 5  | Find First Unsorted Index          | Find first index where the array is not sorted              | O(n)            | O(1)             |
| 6  | Print Extreme Elements Alternately | Print smallest, largest, second smallest, second largest... | O(n log n)      | O(n)             |
| 7  | Transpose of Matrix                | Transpose a matrix by swapping rows with columns            | O(n Ã— m)        | O(n Ã— m)         |
| 8  | Rotate Matrix 90Â° Clockwise        | Reverse rows then transpose the matrix                      | O(nÂ²)           | O(1)             |

 Q1: Find Unique Element Using XOR
Problem:
Given an array where every element appears twice except one, find that one unique element.

Why Itâ€™s Useful:
This is a classic use of XOR. Very efficient and often asked in coding interviews.

Approach:

XOR all elements. Duplicate values cancel each other out (x ^ x = 0).

The remaining value is the unique element.

Time Complexity: O(n)
Space Complexity: O(1)

ðŸ”¹ Q2: Two Sum
Problem:
Find two numbers that add up to a target.

Approach:

Use a hashmap to store numbers and their indices.

For each element, check if target - current exists in map.

Time Complexity: O(n)
Space Complexity: O(n)

ðŸ”¹ Q3: Three Sum
Problem:
Find all triplets in the array that sum to zero.

Approach:

Sort the array.

Fix one element and use two pointers to find valid pairs.

Time Complexity: O(nÂ²)
Space Complexity: O(1) or O(n) (if storing results)

ðŸ”¹ Q4: Shift Array by One
Problem:
Shift all elements of an array one step to the right.

Brute Force Approach:

Use a temp variable and shift manually.

Optimized Approach:

Use reverse() method:

Reverse entire array

Reverse from index 1 to end

Time Complexity: O(n)
Space Complexity: O(n) (Brute), O(1) (Optimized)

ðŸ”¹ Q5: Rotate Array by K Positions
Problem:
Rotate array to the right by k positions.

Approach:

Use three reversals:

Reverse full array

Reverse first k elements

Reverse last n - k elements

Time Complexity: O(n)
Space Complexity: O(1)

ðŸ”¹ Q6: Find First Unsorted Index
Problem:
Return the first index where the array is not sorted.

Approach:

Traverse and compare each element with the next.

Return the first index where arr[i] > arr[i+1].

Time Complexity: O(n)
Space Complexity: O(1)

ðŸ”¹ Q7: Print Extreme Elements Alternately
Problem:
Print elements in this pattern: smallest, largest, 2nd smallest, 2nd largest, etc.

Approach:

Sort the array.

Use two pointers (i, j) from both ends to fill a new array.

Time Complexity: O(n log n)
Space Complexity: O(n)

ðŸ”¹ Q8: Transpose of a Matrix
Problem:
Convert rows into columns and vice versa.

Approach:

Use nested loops to assign transpose[j][i] = original[i][j].

Time Complexity: O(n Ã— m)
Space Complexity: O(n Ã— m)

ðŸ”¹ Q9: Rotate Matrix 90Â° Clockwise
Problem:
Rotate square matrix 90 degrees clockwise.

Approach:

First reverse the rows (top to bottom).

Then transpose the matrix (swap matrix[i][j] with matrix[j][i]).

Time Complexity: O(nÂ²)
Space Complexity: O(1) (in-place)

ðŸ”¹ Q10: Transpose + Rotate Matrix Combined
Problem:
Combination of matrix transpose and 90Â° rotation.

Approach:

Reverse the matrix vertically.

Then apply transpose.

Time Complexity: O(nÂ²)
Space Complexity: O(1)
